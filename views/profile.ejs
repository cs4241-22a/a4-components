<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="theme-color" content="#4285f4">
    <meta name="description" content="Todo signup page">
    <meta name="keywords" content="todo, express, mongo">
    <title>Your Todo List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

</head>

<body>
    <div id="root"></div>

    <style>

    </style>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
    <script type="text/babel">
        'use strict';

        function getCookie(cname) {
            let authArr = []
            let name = cname + "=";
            let decodedCookie = decodeURIComponent(document.cookie);
            let ca = decodedCookie.split(';');
            for (let str of ca) {
                str.toString()
                const newStr = str.trim()
                if (name == newStr.substring(0, 5)) {
                    authArr.push(newStr.substring(5))
                }
            }

            let logName = ""
            let windowUrl = window.location.href.toString().split('/')
            logName = windowUrl.pop()

            for (let arrName of authArr) {
                if (arrName == logName) {
                    return arrName
                }
            }
            return "";
        }

        // AddTODO Component
        const AddTodo = (props) => {
            const addTodo = async e => {
                e.preventDefault()

                const newTodoData = {
                    "title": todoForm.elements['inputTitle'].value,
                    "description": todoForm.elements['inputDescription'].value,
                    "username": props.username
                }
                if (!(newTodoData.title == '' || newTodoData.description == '')) {
                    const response = await fetch("/todo/addTodo", {
                        method: "PUT",
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(newTodoData)
                    })
                    const responseJSON = await response.json()

                    if (responseJSON.status == 'SUCCESS') {
                        props.setStatus({ status: responseJSON.status, msg: responseJSON.message })
                        window.location.replace('./' + props.username)
                    }
                }
            }



            return (
                <form id="todoForm" onkeydown="return event.key != 'Enter';" onSubmit={(e) => { addTodo(e) }} >
                    <div class="form-group">
                        <label for="inputTitle" class="h6 mb-1 mt-2">Title</label>
                        <input type="text" class="form-control w-25" id="inputTitle" aria-describedby="todoTitle"
                            placeholder="TODO title" />
                    </div>
                    <div class="form-group">
                        <label for="inputDescription" class="h6 mb-1 mt-2">Description</label>
                        <input type="text" class="form-control" id="inputDescription" aria-describedby="todoDescription"
                            placeholder="TODO Description" />
                    </div>
                    <button type="submit" class="btn btn-primary btn-block mb-3 mt-2">Create</button>
                    <small class="text-muted" id="todomsg">

                    </small>
                </form>
            )
        }

        // EditTODO Component
        const EditTodo = (props) => {
            const [description, setDescription] = React.useState("ADA")

            const updateDescription = async e => {
                e.preventDefault()

                const editTodoData = {
                    title: props.editTodo.title,
                    description: editTodoForm.elements['editDescription'].value,
                    username: props.editTodo.username
                }


                const response = await fetch('/todo/editTodo', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(editTodoData)
                })
                props.setEditTodo({
                    title: undefined,
                    description: undefined,
                    username: undefined
                })

                window.location = "/profile/" + props.editTodo.username
            }

            return (
                <div>
                    <form id="editTodoForm" onkeydown="return event.key != 'Enter';" onSubmit={(e) => { updateDescription(e) }}>
                        <div class="form-group">
                            <label for="editDescription">Edit Description for TODO: {props.editTodo.title}</label>
                            <input type="text" class="form-control" id="editDescription" aria-describedby="emailHelp"
                                placeholder="edit description" />
                        </div>

                        <button type="submit" class="btn btn-primary mt-2">Submit</button>
                    </form>
                </div>
            )

        }

        // ListTODO Component
        const ListTodos = (props) => {
            const [todos, setTodos] = React.useState([])

            //delete 
            const deleteTodo = async (title_) => {
                try {
                    const response = await fetch('/todo/deleteTodo', {
                        method: "PUT",
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ title: title_, username: props.username })
                    })
                    const responseJSON = await response.json()
                    setTodos(JSON.parse(responseJSON.todoList))
                    props.setStatus({ status: responseJSON.status, msg: responseJSON.message })
                } catch (err) {
                    console.error(err.message);
                }
            }

            //get todo
            const getTodos = async (username_) => {
                try {

                    const response = await fetch('/todo/getTodo', {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ username: username_ })
                    })
                    const responseJSON = await response.json()
                    setTodos(JSON.parse(responseJSON.data));
                    props.setStatus({ status: responseJSON.status, msg: responseJSON.message })

                } catch (err) {
                    console.error(err.message);
                }
            }

            // init get todos 
            React.useEffect(() => {
                getTodos(props.username);
            }, []);

            return (

                <table className="table mt-5 text-center">
                    <thead id="tableheader" className="thead-dark">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Title</th>
                            <th scope="col">Description</th>
                            <th scope="col">Edit</th>
                            <th scope="col">Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        {todos.map((val, index) => {
                            return (
                                < tr >
                                    <th scope="row">{index}</th>
                                    <td>{val.title}</td>
                                    <td>{val.description}</td>
                                    <td><button class='btn btn-warning' data-title={val.title}
                                        data-description={val.description} onClick={() => {
                                            props.setEditTodo({
                                                title: val.title,
                                                description: val.description,
                                                username: props.username
                                            })
                                        }}>Edit</button></td>
                                    <td><button class='btn btn-danger' onClick={() => {
                                        deleteTodo(val.title)
                                    }}>delete</button></td>
                                </tr>)
                        })}
                    </tbody>
                </table >
            );
        }

        // LogoutBtn Component
        const LogoutBtn = () => {

            return (
                <button className="btn btn-primary" onClick={() => {
                    if (getCookie("auth") != "") {
                        document.cookie = `auth=${getCookie('auth')};max-age=0;path=/;`
                        document.cookie = `auth=${getCookie('auth')};max-age=0;path=/signin;`
                        document.cookie = `auth=${getCookie('auth')};max-age=0;path='/signin';`
                        document.cookie = `auth=${getCookie('auth')};max-age=0;path=['/signin'];`
                    }
                    window.location.replace('/signin')
                }
                }>logout</button>
            )
        }

        const App = () => {
            const [username, setUsername] = React.useState({ name: getCookie("auth") })
            const [editTodo, setEditTodo] = React.useState({
                title: undefined,
                description: undefined,
                username: undefined
            })
            const [status, setStatus] = React.useState({ msg: "" })
            let logName = '';

            const displayEditDesc = () => {
                if (!(editTodo.title == undefined && editTodo.description == undefined && editTodo.username == undefined)) {
                    return <EditTodo editTodo={editTodo} setEditTodo={setEditTodo} setStatus={setStatus} />
                }
            }



            if (username.name == "" || username.name == undefined) {
                return (
                    <div >
                        <h3>User Authentication Failed. Try logging in again</h3>
                        <button onClick={() => { window.location.replace('/signin') }}>To Login</button>
                    </div>
                )

            } else {
                return (
                    <div className="container">
                        <h1>Welcome to {username.name}'s TODO List! <LogoutBtn /></h1>
                        <p>{status.msg}</p>
                        <AddTodo username={username.name} setStatus={setStatus} />
                        {displayEditDesc()}
                        <ListTodos username={username.name} setEditTodo={setEditTodo} setStatus={setStatus} />
                    </div>
                )
            }
        }


        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<App />);

    </script>
</body>


</html>